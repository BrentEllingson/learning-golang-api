// Code generated by mockery v2.46.3. DO NOT EDIT.

package programming

import mock "github.com/stretchr/testify/mock"

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// NewUUID provides a mock function with given fields: withoutHyphens
func (_m *MockService) NewUUID(withoutHyphens bool) string {
	ret := _m.Called(withoutHyphens)

	if len(ret) == 0 {
		panic("no return value specified for NewUUID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(bool) string); ok {
		r0 = rf(withoutHyphens)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_NewUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewUUID'
type MockService_NewUUID_Call struct {
	*mock.Call
}

// NewUUID is a helper method to define mock.On call
//   - withoutHyphens bool
func (_e *MockService_Expecter) NewUUID(withoutHyphens interface{}) *MockService_NewUUID_Call {
	return &MockService_NewUUID_Call{Call: _e.mock.On("NewUUID", withoutHyphens)}
}

func (_c *MockService_NewUUID_Call) Run(run func(withoutHyphens bool)) *MockService_NewUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockService_NewUUID_Call) Return(_a0 string) *MockService_NewUUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_NewUUID_Call) RunAndReturn(run func(bool) string) *MockService_NewUUID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
