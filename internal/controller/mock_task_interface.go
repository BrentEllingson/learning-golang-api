// Code generated by mockery v2.46.3. DO NOT EDIT.

package controller

import (
	context "context"

	dto "github.com/brentellingson/learning-golang-api/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// MockTaskInterface is an autogenerated mock type for the TaskInterface type
type MockTaskInterface struct {
	mock.Mock
}

type MockTaskInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskInterface) EXPECT() *MockTaskInterface_Expecter {
	return &MockTaskInterface_Expecter{mock: &_m.Mock}
}

// DeleteTask provides a mock function with given fields: c, id
func (_m *MockTaskInterface) DeleteTask(c context.Context, id int) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskInterface_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockTaskInterface_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - c context.Context
//   - id int
func (_e *MockTaskInterface_Expecter) DeleteTask(c interface{}, id interface{}) *MockTaskInterface_DeleteTask_Call {
	return &MockTaskInterface_DeleteTask_Call{Call: _e.mock.On("DeleteTask", c, id)}
}

func (_c *MockTaskInterface_DeleteTask_Call) Run(run func(c context.Context, id int)) *MockTaskInterface_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockTaskInterface_DeleteTask_Call) Return(_a0 error) *MockTaskInterface_DeleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskInterface_DeleteTask_Call) RunAndReturn(run func(context.Context, int) error) *MockTaskInterface_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: c, id
func (_m *MockTaskInterface) GetTask(c context.Context, id int) (dto.Task, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 dto.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (dto.Task, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) dto.Task); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskInterface_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockTaskInterface_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - c context.Context
//   - id int
func (_e *MockTaskInterface_Expecter) GetTask(c interface{}, id interface{}) *MockTaskInterface_GetTask_Call {
	return &MockTaskInterface_GetTask_Call{Call: _e.mock.On("GetTask", c, id)}
}

func (_c *MockTaskInterface_GetTask_Call) Run(run func(c context.Context, id int)) *MockTaskInterface_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockTaskInterface_GetTask_Call) Return(_a0 dto.Task, _a1 error) *MockTaskInterface_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskInterface_GetTask_Call) RunAndReturn(run func(context.Context, int) (dto.Task, error)) *MockTaskInterface_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function with given fields: c
func (_m *MockTaskInterface) GetTasks(c context.Context) ([]dto.Task, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []dto.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.Task, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.Task); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskInterface_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type MockTaskInterface_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//   - c context.Context
func (_e *MockTaskInterface_Expecter) GetTasks(c interface{}) *MockTaskInterface_GetTasks_Call {
	return &MockTaskInterface_GetTasks_Call{Call: _e.mock.On("GetTasks", c)}
}

func (_c *MockTaskInterface_GetTasks_Call) Run(run func(c context.Context)) *MockTaskInterface_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTaskInterface_GetTasks_Call) Return(_a0 []dto.Task, _a1 error) *MockTaskInterface_GetTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskInterface_GetTasks_Call) RunAndReturn(run func(context.Context) ([]dto.Task, error)) *MockTaskInterface_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTask provides a mock function with given fields: c, task
func (_m *MockTaskInterface) InsertTask(c context.Context, task dto.InsertTask) (dto.Task, error) {
	ret := _m.Called(c, task)

	if len(ret) == 0 {
		panic("no return value specified for InsertTask")
	}

	var r0 dto.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.InsertTask) (dto.Task, error)); ok {
		return rf(c, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.InsertTask) dto.Task); ok {
		r0 = rf(c, task)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.InsertTask) error); ok {
		r1 = rf(c, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskInterface_InsertTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTask'
type MockTaskInterface_InsertTask_Call struct {
	*mock.Call
}

// InsertTask is a helper method to define mock.On call
//   - c context.Context
//   - task dto.InsertTask
func (_e *MockTaskInterface_Expecter) InsertTask(c interface{}, task interface{}) *MockTaskInterface_InsertTask_Call {
	return &MockTaskInterface_InsertTask_Call{Call: _e.mock.On("InsertTask", c, task)}
}

func (_c *MockTaskInterface_InsertTask_Call) Run(run func(c context.Context, task dto.InsertTask)) *MockTaskInterface_InsertTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.InsertTask))
	})
	return _c
}

func (_c *MockTaskInterface_InsertTask_Call) Return(_a0 dto.Task, _a1 error) *MockTaskInterface_InsertTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskInterface_InsertTask_Call) RunAndReturn(run func(context.Context, dto.InsertTask) (dto.Task, error)) *MockTaskInterface_InsertTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: c, id, task
func (_m *MockTaskInterface) UpdateTask(c context.Context, id int, task dto.UpdateTask) (dto.Task, error) {
	ret := _m.Called(c, id, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 dto.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, dto.UpdateTask) (dto.Task, error)); ok {
		return rf(c, id, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, dto.UpdateTask) dto.Task); ok {
		r0 = rf(c, id, task)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, dto.UpdateTask) error); ok {
		r1 = rf(c, id, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskInterface_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockTaskInterface_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - c context.Context
//   - id int
//   - task dto.UpdateTask
func (_e *MockTaskInterface_Expecter) UpdateTask(c interface{}, id interface{}, task interface{}) *MockTaskInterface_UpdateTask_Call {
	return &MockTaskInterface_UpdateTask_Call{Call: _e.mock.On("UpdateTask", c, id, task)}
}

func (_c *MockTaskInterface_UpdateTask_Call) Run(run func(c context.Context, id int, task dto.UpdateTask)) *MockTaskInterface_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(dto.UpdateTask))
	})
	return _c
}

func (_c *MockTaskInterface_UpdateTask_Call) Return(_a0 dto.Task, _a1 error) *MockTaskInterface_UpdateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskInterface_UpdateTask_Call) RunAndReturn(run func(context.Context, int, dto.UpdateTask) (dto.Task, error)) *MockTaskInterface_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskInterface creates a new instance of MockTaskInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskInterface {
	mock := &MockTaskInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
